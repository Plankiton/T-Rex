#!/usr/bin/python3

from argparse import ArgumentParser as Parser
from TextAnalizer import *
import sys

def show_documentation():
    return 0
def do_tmpl( _text, _conf, _item, _ind ):
    chars = {
        r'%r': search(_conf, _item),
        r'%l': _item,
        r'%ln': _ind,
        }

    for c in chars:
        text = REGEX.split( c, _text )
        char = str( chars[c] )
        _text = char.join(text)
    return _text

def main():
    args = Parser(
        description = "Search engine for terminal.",
        prog = "Getter"
    )

    if not '-c' in sys.argv and not '--config' in sys.argv:
        args.add_argument( 'pattern', help = 'Short pattern to search in text.', type = str )
    args.add_argument( '-c', '--config', help = "Yaml with the dictionary to search in text.", type = str )
    args.add_argument( '-f', '--file', help = "File with the code to translation.", type = str)
    args.add_argument( '-o', '--output', help = "File name where will write the output.", type = str )
    args.add_argument( '-l', '--lines', help = "Line interval (%li-%lf) where you want search. ", type = str )
    args.add_argument( '-t', '--template', help = "Output format", type = str )
    args.add_argument( '-s', '--separate', help = "Separate char", type = str )
    args.add_argument( '-b', '--break-char', help = "Break point char", type = str, dest = 'break_char' )
    args.add_argument( '-d', '--documentation',
                      help = "tutorial of template and config",
                      action = 'store_true',
                      default = False,
    )
    args = args.parse_args()


    text = fopen(args.file).text if args.file else sys.stdin.read()
    conf = args.config if args.config else '@c'+args.pattern
    brea = args.break_char if args.break_char else '\n'
    outp = fopen(args.output) if args.output else None
    sepr = args.separate if args.separate else '\n'
    docu = args.documentation
    tmpl = args.template
    patt = args.pattern
    response = ''

    if docu:
        return show_documentation()

    items = text.strip().split( brea )
    for txt in range( len(items) ):
        if search( patt, items[txt] ):
            if tmpl:
                response += ''.join(( replace( patt, tmpl, items[txt] ), sepr ))
            else:
                response += search( patt, items[txt] ) + sepr
    print( response.strip() )
    return 0

if __name__=="__main__":
    sys.exit( main() )
